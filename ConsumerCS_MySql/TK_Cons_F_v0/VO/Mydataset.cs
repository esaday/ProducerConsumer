// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mydataset.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from mydataset.proto</summary>
public static partial class MydatasetReflection {

  #region Descriptor
  /// <summary>File descriptor for mydataset.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static MydatasetReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg9teWRhdGFzZXQucHJvdG8iRgoKU2luZ2xlRGF0YRIQCghzb21lVGV4dBgB",
          "IAEoCRIRCglzb21lVmFsdWUYAiABKAUSEwoLdGltZVNlY29uZHMYAyABKAMi",
          "KgoHRGF0YVNldBIfCgpzaW5nbGVEYXRhGAEgAygLMgsuU2luZ2xlRGF0YUIX",
          "CgpteS5jbGFzc2VzQglNeURhdGFTZXRiBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::SingleData), global::SingleData.Parser, new[]{ "SomeText", "SomeValue", "TimeSeconds" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DataSet), global::DataSet.Parser, new[]{ "SingleData" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class SingleData : pb::IMessage<SingleData> {
  private static readonly pb::MessageParser<SingleData> _parser = new pb::MessageParser<SingleData>(() => new SingleData());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SingleData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MydatasetReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SingleData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SingleData(SingleData other) : this() {
    someText_ = other.someText_;
    someValue_ = other.someValue_;
    timeSeconds_ = other.timeSeconds_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SingleData Clone() {
    return new SingleData(this);
  }

  /// <summary>Field number for the "someText" field.</summary>
  public const int SomeTextFieldNumber = 1;
  private string someText_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SomeText {
    get { return someText_; }
    set {
      someText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "someValue" field.</summary>
  public const int SomeValueFieldNumber = 2;
  private int someValue_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SomeValue {
    get { return someValue_; }
    set {
      someValue_ = value;
    }
  }

  /// <summary>Field number for the "timeSeconds" field.</summary>
  public const int TimeSecondsFieldNumber = 3;
  private long timeSeconds_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long TimeSeconds {
    get { return timeSeconds_; }
    set {
      timeSeconds_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SingleData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SingleData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SomeText != other.SomeText) return false;
    if (SomeValue != other.SomeValue) return false;
    if (TimeSeconds != other.TimeSeconds) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SomeText.Length != 0) hash ^= SomeText.GetHashCode();
    if (SomeValue != 0) hash ^= SomeValue.GetHashCode();
    if (TimeSeconds != 0L) hash ^= TimeSeconds.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SomeText.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SomeText);
    }
    if (SomeValue != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(SomeValue);
    }
    if (TimeSeconds != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(TimeSeconds);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SomeText.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SomeText);
    }
    if (SomeValue != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SomeValue);
    }
    if (TimeSeconds != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeSeconds);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SingleData other) {
    if (other == null) {
      return;
    }
    if (other.SomeText.Length != 0) {
      SomeText = other.SomeText;
    }
    if (other.SomeValue != 0) {
      SomeValue = other.SomeValue;
    }
    if (other.TimeSeconds != 0L) {
      TimeSeconds = other.TimeSeconds;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          SomeText = input.ReadString();
          break;
        }
        case 16: {
          SomeValue = input.ReadInt32();
          break;
        }
        case 24: {
          TimeSeconds = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class DataSet : pb::IMessage<DataSet> {
  private static readonly pb::MessageParser<DataSet> _parser = new pb::MessageParser<DataSet>(() => new DataSet());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DataSet> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MydatasetReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataSet() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataSet(DataSet other) : this() {
    singleData_ = other.singleData_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataSet Clone() {
    return new DataSet(this);
  }

  /// <summary>Field number for the "singleData" field.</summary>
  public const int SingleDataFieldNumber = 1;
  private static readonly pb::FieldCodec<global::SingleData> _repeated_singleData_codec
      = pb::FieldCodec.ForMessage(10, global::SingleData.Parser);
  private readonly pbc::RepeatedField<global::SingleData> singleData_ = new pbc::RepeatedField<global::SingleData>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::SingleData> SingleData {
    get { return singleData_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DataSet);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DataSet other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!singleData_.Equals(other.singleData_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= singleData_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    singleData_.WriteTo(output, _repeated_singleData_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += singleData_.CalculateSize(_repeated_singleData_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DataSet other) {
    if (other == null) {
      return;
    }
    singleData_.Add(other.singleData_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          singleData_.AddEntriesFrom(input, _repeated_singleData_codec);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
